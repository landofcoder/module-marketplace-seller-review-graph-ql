# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_SellerReviewGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

type Query {
    sellerRatings (
        filter: SellerRatingFilterInput @doc(description: "Identifies which seller messages filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: SellerRatingSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending seller message.")
    ):SellerRates @resolver(class: "\\Lof\\SellerReviewGraphQl\\Model\\Resolver\\Seller\\Ratings") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Customer {
    sellerRatings (
        filter: SellerRatingFilterInput @doc(description: "Identifies which seller messages filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: SellerRatingSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending seller message.")
    ): SellerRates @resolver( class: "Lof\\SellerReviewGraphQl\\Model\\Resolver\\Customer\\Ratings") @doc(description: "Query by Query Customer Messages.")
}

type Mutation {
    LofMkpReviewSeller(input: ReviewInput!): Res @resolver(class: "\\Lof\\SellerReviewGraphQl\\Model\\Resolver\\Customer\\ReviewSeller") @doc(description: "Review Seller")
}

type SellerRates {
    total_count: Int @doc(description: "The number of seller rates returned")
    items: [SellerRate] @doc(description: "An array of seller rates")
}

type SellerRate {
    rating_id: Int @doc(description: "Rating ID")
    seller_id: Int @doc(description: "Seller ID")
    customer_id: Int @doc(description: "Customer ID")
    rate1: Int @doc(description: "Rate 1")
    rate2: Int @doc(description: "Rate 2")
    rate3: Int @doc(description: "Rate 3")
    rating: Int @doc(description: "Total Rate")
    email: String @doc(description: "Email")
    title: String @doc(description: "Title")
    status: String @doc(description: "Status")
    detail: String @doc(description: "Detail")
    nickname: String @doc(description: "Nick Name")
    created_at: String @doc(description: "Created At")
}

input SellerRatingFilterInput {
    seller_id: FilterEqualTypeInput @doc(description: "Seller ID")
    seller_id: FilterEqualTypeInput @doc(description: "seller_id")
    customer_id: FilterEqualTypeInput @doc(description: "customer_id")
    rate1: FilterEqualTypeInput @doc(description: "rate1")
    rate2: FilterEqualTypeInput @doc(description: "rate2")
    rate3: FilterEqualTypeInput @doc(description: "rate3")
    rating: FilterEqualTypeInput @doc(description: "rating")
    email: FilterTypeInput @doc(description: "email")
    title: FilterTypeInput @doc(description: "title")
    detail: FilterTypeInput @doc(description: "detail")
    status: FilterEqualTypeInput @deprecated(reason: "status")
    nickname: FilterTypeInput @doc(description: "nickname")
    or: SellerRatingFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input ReviewInput {
    seller_id  : String!
    rate1  : Int!
    rate2  : Int!
    rate3  : Int!
    nickname  : String!
    email  : String!
    title  : String!
    detail  : String!
}

type Res {
    code: String
    message: String
}
