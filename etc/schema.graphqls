# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_SellerReviewGraphQl
# @copyright   Copyright (c) 2022 Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

enum UrlRewriteEntityTypeEnum {
    LOF_MARKETPLACE
}


type StoreConfig {
    lofmarketplace_general_enable  : String  @doc(description: "Query by lofmarketplace_general_enable.")
    lofmarketplace_general_rating_approval  : String  @doc(description: "Query by lofmarketplace_general_rating_approval.")
    lofmarketplace_general_seller_approval  : String  @doc(description: "Query by lofmarketplace_general_seller_approval.")
}

type Query {
    lofSellerById(
        seller_id: Int! @doc(description: "Seller id")
    ): Seller @resolver(class: "\\Lof\\SellerReviewGraphQl\\Model\\Resolver\\SellerById") @doc(description: "Get Seller by ID") @cache( cacheIdentity: "Lof\\SellerReviewGraphQl\\Model\\Resolver\\SellerById\\Identity")

    lofSellerListRating(
       pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
       currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
  ):Sellers @resolver(class: "\\Lof\\SellerReviewGraphQl\\Model\\Resolver\\Sellers") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes") @cache( cacheIdentity: "Lof\\SellerReviewGraphQl\\Model\\Resolver\\Sellers\\Identity")

}

type Mutation {

    LofMkpReviewSeller(input: ReviewInput!): Res @resolver(class: "\\Lof\\SellerReviewGraphQl\\Model\\Resolver\\ReviewSeller") @doc(description: "Review Seller")
}

type SellerRate {
    rating_id: Int @doc(description: "Rating ID")
    seller_id: Int @doc(description: "Seller ID")
    customer_id: Int @doc(description: "Customer ID")
    rate1: Int @doc(description: "Rate 1")
    rate2: Int @doc(description: "Rate 2")
    rate3: Int @doc(description: "Rate 3")
    rating: Int @doc(description: "Total Rate")
    email: String @doc(description: "Email")
    title: String @doc(description: "Title")
    status: String @doc(description: "Status")
    detail: String @doc(description: "Detail")
    nickname: String @doc(description: "Nick Name")
    created_at: String @doc(description: "Created At")
}

type Seller {
    seller_id: Int @doc(description: "Seller ID")
    customer_id: Int @doc(description: "Customer Id")
    seller_rates: SellerRates @doc(description: "Seller Rates")
}
type Sellers {
    total_count: Int @doc(description: "The number of sellers returned")
    items: [Seller] @doc(description: "An array of sellers that match the specified search criteria")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\SellerReviewGraphQl\\Model\\Resolver\\Sellers\\SortFields")
}


type SellerRates {
    total_count: Int @doc(description: "The number of seller rates returned")
    items: [SellerRate] @doc(description: "An array of seller rates")
}

type Res {
    code: String
    message: String
}
input SellerCustomerInput {
    seller: SellerInput!
    customer: CustomerDataInput!
    password: String!
    or: SellerCustomerInput
}

input SellerInput {
    group_id  : String!
    url_key  : String!
}

input ReviewInput {
    seller_id  : String!
    rate1  : Int!
    rate2  : Int!
    rate3  : Int!
    nickname  : String!
    email  : String!
    title  : String!
    detail  : String!
}

input CustomerDataInput {
    firstname: String!
    lastname: String!
    email: String!
    address: AddressInput
}

input AddressInput {
    region_id: String
    country_id: String!
    city: String!
    street: String!
    company: String
    telephone: String!
    postcode: String!
    or: AddressInput
}

type SortField {
    value: String @doc(description: "Attribute code of sort field.")
    label: String @doc(description: "Label of sort field.")
}
type SortFields @doc(description: "SortFields contains a default value for sort fields and all available sort fields.") {
    default: String @doc(description: "Default value of sort fields.")
    options: [SortField] @doc(description: "Available sort fields.")
}
